'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-630eaac5.js');

const youTubeCss = "#player{max-width:100%}";

const YouTube = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  componentDidLoad() {
    if ('YT' in window) {
      this.constructPlayer(window['YT']);
    }
    else {
      // load API then construct player
      this.loadApi().then(YT => this.constructPlayer(YT));
    }
  }
  // Player Constructor
  constructPlayer(YT) {
    new YT.Player('player', {
      height: this.height,
      width: this.width,
      videoId: this.video_id,
      playerVars: {
        'autoplay': this.autoplay ? parseInt(this.autoplay) : 0,
        'controls': this.controls ? parseInt(this.controls) : 1
      },
      events: {
        'onReady': event => this.onReady(event),
        'onStateChange': event => this.onStateChange(event),
        'onPlaybackQualityChange': event => this.onPlaybackQualityChange(event),
        'onApiChange': event => this.onApiChange(event),
        'onPlaybackRateChange': event => this.onPlaybackRateChange(event),
        'onError': event => this.onError(event),
      }
    });
  }
  // Event Handlers
  onReady(event) {
    if (this.playerReady) {
      this.playerReady(event);
    }
  }
  onStateChange(event) {
    if (this.playerStateChange) {
      this.playerStateChange(event);
    }
  }
  onError(event) {
    if (this.playerError) {
      this.playerError(event);
    }
  }
  onApiChange(event) {
    if (this.playerApiChange) {
      this.playerApiChange(event);
    }
  }
  onPlaybackQualityChange(event) {
    if (this.playbackQualityChange) {
      this.playbackQualityChange(event);
    }
  }
  onPlaybackRateChange(event) {
    if (this.playbackRateChange) {
      this.playbackRateChange(event);
    }
  }
  // Load the API
  loadApi() {
    const tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    // return a promise that resolves to YT when the iframe is ready
    return new Promise(resolve => {
      window['onYouTubeIframeAPIReady'] = () => {
        resolve(window['YT']);
      };
    });
  }
  render() {
    return index.h("div", { id: "player" });
  }
};
YouTube.style = youTubeCss;

exports.you_tube = YouTube;
